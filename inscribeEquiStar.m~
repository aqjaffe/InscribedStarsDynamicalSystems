function r = inscribeEquiStar(n,k,t,animation)
    % some constants
    epsilon = 0.00001;           % the tolerance of the stepping
    
    if n < 2*k
        msg = 'Must have n >= 4*l+2';
        error(msg)
    end
    
    if mod(n,k) == 0
        P = vertcat(cos(0:(2*pi/n):2*pi),sin(0:(2*pi/n):2*pi));
        S(:,1) = (1-t)*P(:,1)+t*P(:,2);
        for ii = 2:k
            S(:,ii) = (S(1,ii-1)*P(1,2)-S(2,ii-1)*P(2,2))+
        end
        if animation == "full"
            warning('Cannot use full animation when 2*l+1 divides n.')
        end
        % TODO: need to finish this
        clf;
        plot(P(1,:),P(2,:),'-k');
        hold on;
        plot(S(1,1:ii),S(2,1:ii),'b');
        scatter(S(1,1),S(2,1),'g');
        scatter(S(1,ii),S(2,ii),'r');
        axis([-2 2 -2 2]);
        axis square;
        xlabel('Inscribed Star');
    else
        if mod(n,2) == 0
            rn = 2*cos(pi/n);
        else
            rn = 1+cos(2*pi/n)/cos(pi/n);
        end
        
        [w,rmin,rmax] = inscribeEquiStarHelper(n,k,t,0,rn,animation);
        while(abs(w - (k-1)/2) >= epsilon)
            [w,rmin,rmax] = inscribeEquiStarHelper(n,k,t,rmin,rmax,animation);
        end
        r = 0.5*(rmin+rmax);
        if(animation == "still" || animation == "full")
            dynamicalSystem(n,k,t,r,"still");
        end
    end
end

function [w,newrmin,newrmax] = inscribeEquiStarHelper(n,k,t,rmin,rmax,animation)  
    % search for the correct value of r
    % within the range (rmin,rmax).
    
    tdur = 0.25;
    
    r = 0.5*(rmin + rmax);
    if(animation == "none" || animation == "still")
        w = dynamicalSystem(n,k,t,r,"none");
    else
        pause(tdur)
        w = dynamicalSystem(n,k,t,r,"still");
    end
    if w < (k-1)/2  % the point was slow
        newrmin = r;
        newrmax = rmax;
    else            % the point was fast
        newrmin = rmin;
        newrmax = r;
    end
end